// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// generator seed {
//   provider = "prisma-db-seed"
//   // optional config
// }


model IngresosEmpresa {
  id            Int      @id @default(autoincrement())
  empresaId     Int      @unique // Relación con la tabla Empresa (única)
  empresa       Empresa  @relation(fields: [empresaId], references: [id])
  saldoActual    Float   @default(0)
  ingresosTotales Float   @default(0) // Total acumulado de ingresos
  egresosTotales Float   @default(0) // Total acumulado de egresos
  numeroVentas   Int      @default(0) // Número de ventas realizadas
  updatedAt      DateTime @updatedAt  // Fecha de última actualización
  createdAt      DateTime @default(now()) // Fecha de creación
}

model Empresa {
  id        Int      @id @default(autoincrement())
  nombre    String   // Nombre de la empresa
  telefono  String   // Teléfono principal
  pbx       String?  // PBX (opcional)
  direccion String   // Dirección de la empresa
  email     String   @unique // Correo electrónico único
  website   String?  // Página web de la empresa (opcional)
  createdAt DateTime @default(now())   // Fecha de creación
  updatedAt DateTime @updatedAt        // Fecha de última actualización
  //
  ingresosEmpresa IngresosEmpresa? // Relación 1:1
  //
  Usuario Usuario[]

  Credito Credito[]
}



model Ubicacion {
  id        Int      @id @default(autoincrement())
  latitud   Float
  longitud  Float
  timestamp DateTime @default(now())
  usuario   Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId Int
}
model Categoria {
  id         Int                 @id @default(autoincrement())
  nombre     String
  productos  ProductoCategoria[] // Relación a la tabla intermedia ProductoCategoria

  creadoEn   DateTime            @default(now())
  actualizadoEn DateTime         @updatedAt
}

model Producto {
  id          Int                @id @default(autoincrement())
  nombre      String
  descripcion String?
  precio      Float              // Precio de venta del producto
  costo       Float?   @default(0)           // Precio de venta del producto

  stock       Stock?             // Relación uno a uno con Stock
  categorias  ProductoCategoria[] // Relación a la tabla intermedia ProductoCategoria
  ventas      VentaProducto[]    // Relación a la tabla intermedia VentaProducto
  entregas    EntregaStockProducto[] // Relación a la tabla intermedia EntregaStockProducto

  codigoProducto String          @unique// NUEVO A APLICAR
  creadoEn    DateTime           @default(now())
  actualizadoEn DateTime         @updatedAt
  //
  imagenes    ImagenProducto[]    // Relación con las imágenes
}


model ImagenProducto {
  id         Int      @id @default(autoincrement())
  url        String   // URL de la imagen (Cloudinary, S3, etc.)
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId Int      // ID del producto al que pertenece
  creadoEn   DateTime @default(now())
}

model ProductoCategoria {
  id          Int        @id @default(autoincrement())
  producto    Producto    @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId  Int
  categoria   Categoria   @relation(fields: [categoriaId], references: [id], onDelete: Cascade)
  categoriaId Int

  creadoEn    DateTime    @default(now())
  actualizadoEn DateTime  @updatedAt
}

model EntregaStock {
  id           Int                    @id @default(autoincrement())
  proveedor    Proveedor?               @relation(fields: [proveedorId], references: [id], onDelete: SetNull)
  proveedorId  Int?
  timestamp    DateTime                @default(now()) // Fecha de la entrega
  productos    EntregaStockProducto[]  // Relación con los productos entregados

  creadoEn     DateTime                @default(now())
  actualizadoEn DateTime               @updatedAt
  total_pagado Int//NUEVO PARA SABER CUANTO FUE EL TOTAL DE LA ENTREGA
}

model EntregaStockProducto {
  id           Int        @id @default(autoincrement())
  producto     Producto    @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId   Int
  entregaStock EntregaStock @relation(fields: [entregaStockId], references: [id], onDelete: Cascade)
  entregaStockId Int
  cantidad     Int         // Cantidad de este producto en esta entrega
  costoUnitario Float      // Costo por unidad de este producto en esta entrega
}

model Stock {
  id          Int       @id @default(autoincrement())
  producto    Producto   @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId  Int        @unique
  proveedor   Proveedor?  @relation(fields: [proveedorId], references: [id], onDelete: SetNull)
  proveedorId Int?
  cantidad    Int        // Cantidad total de este producto en stock
  costoTotal  Float      // Costo total de adquisición de todos los productos en stock  creadoEn    DateTime   @default(now())
  actualizadoEn DateTime @updatedAt
}


model Proveedor {
  id             Int              @id @default(autoincrement())
  nombre         String
  correo         String?           
  telefono       String?
  direccion      String?
  razonSocial    String?
  rfc            String?
  nombreContacto String?
  telefonoContacto String?
  emailContacto  String?
  pais           String?
  ciudad         String?
  codigoPostal   String?
  activo         Boolean          @default(true)
  notas          String?
  productos      Stock[]
  entregas       EntregaStock[]
  creadoEn       DateTime         @default(now())
  actualizadoEn  DateTime         @updatedAt
}

model VentaProducto {
  id          Int      @id @default(autoincrement())
  producto    Producto  @relation(fields: [productoId], references: [id], onDelete: Cascade) // Añadir Cascade aquí
  productoId  Int
  venta       Venta     @relation(fields: [ventaId], references: [id], onDelete: Cascade) // Si también necesitas eliminar las ventas asociadas
  ventaId     Int
  cantidad    Int
  precio      Float
  creadoEn    DateTime  @default(now())
}

model Descuento {
  id          Int      @id @default(autoincrement())
  porcentaje  Float    // Descuento en porcentaje (ej. 6.0 para un 6%)
  cliente     Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clienteId   Int
  activo      Boolean  @default(true) // Si el descuento está activo y puede ser aplicado
  creadoEn    DateTime @default(now())
  actualizadoEn DateTime @updatedAt
  usado Boolean  @default(false) // Si el descuento está activo y puede ser aplicado
  dePedido      Boolean   @default(false) // Si el descuento fue solicitado

}

enum EstadoSolicitud {
  PENDIENTE
  ACEPTADA
  RECHAZADA
}

model SolicitudDescuento {
  id           Int      @id @default(autoincrement())
  porcentaje   Float    // Porcentaje solicitado
  estado       EstadoSolicitud @default(PENDIENTE) // Establecer PENDIENTE como valor predeterminado
  vendedor     Usuario  @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId    Int
  cliente      Cliente  @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clienteId    Int
  creadoEn     DateTime @default(now())
  justificacion String
}

model Notificacion {
  id               Int                    @id @default(autoincrement())
  mensaje          String
  leido            Boolean                @default(false) // Control a nivel general
  remitenteId      Int?
  remitente        Usuario?               @relation("NotificacionesEnviadas", fields: [remitenteId], references: [id], onDelete: Cascade)
  creadoEn         DateTime               @default(now())
  destinatarios    NotificacionesLeidas[] // Para manejar destinatarios y si leyeron
}

model NotificacionesLeidas {
  id               Int                    @id @default(autoincrement())
  notificacion     Notificacion           @relation(fields: [notificacionId], references: [id], onDelete: Cascade)
  notificacionId   Int
  usuario          Usuario                @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId        Int
  leido            Boolean                @default(false)
  leidoEn          DateTime?
  timestamp          DateTime  @default(now())

}

model Asistencia {
  id              Int      @id @default(autoincrement())
  fecha           DateTime 
  entrada         DateTime
  salida          DateTime? // Puede estar en null si aún no ha salido
  usuario         Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId       Int
  creadoEn        DateTime  @default(now())
}

//-----------------------------------------------

enum MotivoVisita {
  COMPRA_CLIENTE
  PRESENTACION_PRODUCTOS
  NEGOCIACION_PRECIOS
  ENTREGA_MUESTRAS
  PLANIFICACION_PEDIDOS
  CONSULTA_CLIENTE
  SEGUIMIENTO
  PROMOCION
  OTRO
}

enum TipoVisita {
  PRESENCIAL
  VIRTUAL
}

enum EstadoVisita {
  INICIADA      // Cuando la visita ha comenzado
  FINALIZADA    // Cuando se ha completado exitosamente
  CANCELADA     // Cuando el cliente no está disponible o no quiere la visita
}

model Visita {
  id            Int          @id @default(autoincrement())
  inicio        DateTime
  fin           DateTime?
  vendedor      Usuario       @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId     Int
  cliente       Cliente       @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clienteId     Int
  observaciones String?
  ventas        Venta[]       // Una visita puede tener múltiples ventas
  motivoVisita  MotivoVisita?
  tipoVisita    TipoVisita?
  estadoVisita  EstadoVisita  @default(INICIADA)
  creadoEn      DateTime      @default(now())
  actualizadoEn DateTime      @updatedAt
}

model Venta {
  id                 Int      @id @default(autoincrement())
  monto              Float
  montoConDescuento  Float
  descuento          Int?
  metodoPago         MetodoPago
  timestamp          DateTime  @default(now())
  vendedor           Usuario   @relation(fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId          Int
  cliente            Cliente   @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  clienteId          Int
  visita             Visita?   @relation(fields: [visitaId], references: [id]) // Relación con Visita
  visitaId           Int?      // Quita @unique aquí
  productos          VentaProducto[]
  //
  Credito Credito[]
}



model Prospecto {
  id                  Int              @id @default(autoincrement())
  inicio              DateTime         @default(now()) // Se establece automáticamente al crear el prospecto
  fin                 DateTime?        // Se establece cuando se finaliza el prospecto
  vendedor            Usuario          @relation("ProspectosVendedor", fields: [usuarioId], references: [id], onDelete: Cascade)
  usuarioId           Int
  cliente             Cliente?         @relation(fields: [clienteId], references: [id],  onDelete: SetNull) // Relación opcional con cliente
  clienteId           Int?
  nombreCompleto      String?           // Agregado para capturar el nombre completo
  apellido            String?
  empresaTienda       String?          // Agregado para capturar el nombre de la empresa o tienda
  telefono            String?          // Mapeado desde el formulario, opcional
  correo              String?          // Mapeado desde el formulario, opcional
  direccion           String?          // Dirección del negocio o lugar visitado
  tipoCliente         TipoCliente?     // Mapeado desde tipoCliente en el formulario
  categoriasInteres   String[]         // Mapeado desde el formulario
  volumenCompra       String?          // Mapeado desde el formulario, opcional
  presupuestoMensual  String?          // Mapeado desde el formulario, opcional
  preferenciaContacto String?          // Mapeado desde el formulario, opcional
  comentarios         String?          // Comentarios u observaciones del prospecto
  creadoEn            DateTime         @default(now()) // Se establece automáticamente
  actualizadoEn       DateTime         @updatedAt       // Se actualiza automáticamente
  estado              EstadoProspecto   @default(EN_PROSPECTO) // Usar solo el valor sin el nombre del enum
  //--RELACIONES CON UBICACIONES:
  municipio           Municipio?       @relation(fields: [municipioId], references: [id]) // Relación con el municipio
  municipioId         Int?
  departamento        Departamento?    @relation(fields: [departamentoId], references: [id]) // Relación con el departamento
  departamentoId      Int?
  //----------------------------
    //-- Relación uno a uno con UbicacionProspecto
  //-- Relación uno a uno con UbicacionProspecto
  ubicacion           UbicacionProspecto? @relation(fields: [ubicacionId], references: [id])
  ubicacionId         Int?  @unique  // Mantener @unique aquí para relación uno a uno
  //----------------
  
}

model UbicacionProspecto {
  id         Int        @id @default(autoincrement())
  latitud    Float
  longitud   Float
  prospecto  Prospecto?  @relation  // Eliminar los atributos `fields` y `references`
  prospectoId Int       // No necesita ser único aquí
  creadoEn   DateTime   @default(now())
}


enum EstadoProspecto {
  EN_PROSPECTO
  FINALIZADO
  CERRADO
}


model Cliente {
  id                   Int                 @id @default(autoincrement())//-
  nombre               String//-
  apellido             String?
  correo               String?              
  telefono             String//-
  direccion            String              // DIRECCIÓN TIPO STRING DESCRITO//-
  ventas               Venta[]//-
  solicitudesDescuento SolicitudDescuento[]//(?)
  descuentos           Descuento[]//-
  prospectos           Prospecto[]//-
  creadoEn             DateTime            @default(now())//-
  actualizadoEn        DateTime            @updatedAt//-
  visitas              Visita[]//-
  municipio            Municipio?          @relation(fields: [municipioId], references: [id])//EN UBICACION TABLA
  municipioId          Int?//EN UBICACION TABLA
  departamento         Departamento?       @relation(fields: [departamentoId], references: [id])//EN UBICACION TABLA
  departamentoId       Int?//EN UBICACION TABLA
  ubicacion            UbicacionCliente?   @relation(name: "ClienteToUbicacionCliente")
  ubicacionId          Int? @unique        // Clave foránea única para uno-a-uno
  tipoCliente String?
  categoriasInteres   String[]         // Mapeado desde el formulario
  volumenCompra String?
  presupuestoMensual String?
  preferenciaContacto String?
  comentarios String?

  Credito Credito[]
}


model UbicacionCliente {
  id         Int      @id @default(autoincrement())
  latitud    Float    // Latitud geográfica
  longitud   Float    // Longitud geográfica
  
  cliente    Cliente? @relation(name: "ClienteToUbicacionCliente", fields: [clienteId], references: [id], onDelete: Cascade)//DELETE CASCADA CLIENTE
  clienteId  Int?     @unique             // Clave foránea única para uno-a-uno
}


model Departamento {
  id         Int         @id @default(autoincrement())
  nombre     String      @unique
  municipios Municipio[] // Relación con municipios
  prospectos Prospecto[] // Relación con los prospectos
  clientes   Cliente[]   // Relación con los clientes
}


model Municipio {
  id             Int         @id @default(autoincrement())
  nombre         String      @unique
  departamento   Departamento @relation(fields: [departamentoId], references: [id], onDelete: Cascade)
  departamentoId Int
  prospectos     Prospecto[]  // Relación con los prospectos
  clientes       Cliente[]    // Relación con los clientes
}

model Usuario {
  id                     Int                    @id @default(autoincrement())
  nombre                 String
  correo                 String                 @unique
  contrasena             String
  rol                    Rol
  ubicaciones            Ubicacion[]
  ventas                 Venta[]
  solicitudesDescuento   SolicitudDescuento[]
  notificacionesEnviadas Notificacion[]          @relation("NotificacionesEnviadas")
  registrosAsistencia    Asistencia[]
  prospectos             Prospecto[]            @relation("ProspectosVendedor")
  creadoEn               DateTime               @default(now())
  actualizadoEn          DateTime               @updatedAt
  visitas                Visita[]
  activo                 Boolean                @default(true)
  NotificacionesLeidas   NotificacionesLeidas[] // Solo esta relación para manejar las notificaciones leídas

    // Campos para la recuperación de contraseña
  tokenRecuperacion      String?   // Token generado para restablecer contraseña
  expiracionToken        DateTime? // Fecha de expiración del token
  //
  empresaId   Int?        // FK opcional, en caso de que un usuario no tenga empresa
  empresa     Empresa?    @relation(fields: [empresaId], references: [id])
}

model Credito {
  id                  Int          @id @default(autoincrement())
  venta               Venta?       @relation(fields: [ventaId], references: [id], onDelete: Cascade)
  ventaId             Int?
  cliente             Cliente?     @relation(fields: [clienteId], references: [id])
  clienteId           Int?
  empresaId           Int?
  empresa             Empresa?     @relation(fields: [empresaId], references: [id], onDelete: Cascade)
  montoTotal          Float?        // Monto total del crédito antes de interés
  cuotaInicial        Float?        // Monto inicial pagado
  totalPagado         Float?        @default(0) // Total pagado hasta ahora
  numeroCuotas        Int?          // Número total de cuotas
  estado              EstadoCredito // Enum para saber si está activo, cerrado, etc.
  interes             Float?        // Nivel de interés en porcentaje (ej: 10 para 10%)
  montoConInteres     Float?        // Monto total después de aplicar el interés
  montoTotalConInteres Float?      // Monto total del crédito después de interés
  saldoPendiente      Float?        // Saldo restante después del pago inicial
  fechaInicio         DateTime?     @default(now()) // Fecha en que inició el 
  fechaFin            DateTime?     
  diasEntrePagos      Float?        //NUEVA PROPIEDAD
  fechaContrato       DateTime?     @default(now()) // Fecha del contrato
  dpi                 String?       // DPI del cliente
  comentario          String?      // Observaciones del crédito
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  pagos               PagoCredito[] // Relación con los pagos realizados
}

model PagoCredito {
  id             Int      @id @default(autoincrement())
  credito        Credito  @relation(fields: [creditoId], references: [id], onDelete: Cascade)
  creditoId      Int      // Relación con la tabla Credito
  monto          Float    // Monto del pago
  timestamp      DateTime @default(now()) // Fecha del pago
  metodoPago     MetodoPago // Cómo se realizó el pago
}

enum FrecuenciaPago {
  MENSUAL
  QUINCENAL
  SEMANAL
}

enum EstadoCredito {
  ACTIVO
  CERRADO
}

enum Rol {
  ADMIN
  VENDEDOR
}

enum MetodoPago {
  CONTADO
  TARJETA
  TRANSFERENCIA_BANCO
  CREDITO
}
// Enums añadidos
   
enum TipoCliente {
  Minorista
  Mayorista
  Boutique
  TiendaEnLinea
  ClienteIndividual
}

enum ActividadNegocio {
  VENTA_ROPA
  VENTA_COMIDA
  SERVICIO_TECNICO
  CONSULTORIA
  OTRO
}

enum NivelInteres {
  MUY_BAJO
  BAJO
  MODERADO
  ALTO
  MUY_ALTO
}
